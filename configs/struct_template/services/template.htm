package services

import (
	"context"
	"<< .modulePrefix >>/internal/dao"
	"<< .modulePrefix >>/internal/dto"
	"<< .modulePrefix >>/internal/models"
	"<< .modulePrefix >>/pkg/exports"
	"<< .logging >>"
	"github.com/gin-gonic/gin"
)

type << .modelName >>Service struct {
}

var << .modelName >>Svc = &<< .modelName >>Service{}

func Get<< .modelName >>Svc() *<< .modelName >>Service {
	return << .modelName >>Svc
}

func (svc *<< .modelName >>Service) Save(c *gin.Context, param *dto.<< .modelName >>) (interface{}, exports.APIError) {
	errs := dao.ExecDBTx(func(ctx context.Context) error {
		<< .modelName >> := &models.<< .modelName >>{
			//todo fill Private
		}
		err := dao.Get<< .modelName >>Dao().SaveOrUpdate(ctx, << .modelName >>)
		if err != nil {
			logging.Error(err).Send()
			return err
		}
		return nil
	})
	if errs != nil {
		logging.Error(errs).Send()
		return nil, exports.WrapperError(errs)
	}
	return nil, nil
}
func (svc *<< .modelName >>Service) Delete(c *gin.Context, param dto.<< .modelName >>Id) (interface{}, exports.APIError) {
	errs := dao.ExecDBTx(func(ctx context.Context) error {
		err := dao.Get<< .modelName >>Dao().Delete(ctx, param.Id)
		if err != nil {
			logging.Error(err).Send()
			return err
		}
		return nil
	})
	if errs != nil {
		logging.Error(errs).Send()
		return nil, exports.WrapperError(errs)
	}
	return nil, nil
}
func (svc *<< .modelName >>Service) Find(c *gin.Context, param dto.<< .modelName >>Param) (interface{}, exports.APIError) {
	<< .modelName >>s, total, err := dao.Get<< .modelName >>Dao().FindByParam(c, param, nil)
	if err != nil {
		logging.Error(err).Send()
		return nil, err
	}
	resp := &dto.BaseListResp{}
	resp.Items = << .modelName >>s
	resp.Total = total
	return resp, nil
}
